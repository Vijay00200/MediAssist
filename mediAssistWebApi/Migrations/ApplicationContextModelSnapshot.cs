// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mediassistwebapi.Entities;

namespace mediAssistWebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Dosage", b =>
                {
                    b.Property<int>("DosageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DosageDays")
                        .HasColumnType("int");

                    b.Property<string>("DosagePower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DosageTimes")
                        .HasColumnType("int");

                    b.Property<int>("RemedyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DosageId");

                    b.HasIndex("RemedyId")
                        .IsUnique();

                    b.ToTable("Dosages");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.LoginModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoginModels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "def@123",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "johndoe"
                        });
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Remedy", b =>
                {
                    b.Property<int>("RemedyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RemedyId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("SymptomId");

                    b.ToTable("Remedies");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("SymptomName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Dosage", b =>
                {
                    b.HasOne("mediassistwebapi.Entities.Models.Remedy", "Remedy")
                        .WithOne("Dosage")
                        .HasForeignKey("mediassistwebapi.Entities.Models.Dosage", "RemedyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remedy");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Remedy", b =>
                {
                    b.HasOne("mediassistwebapi.Entities.Models.Medicine", "Medicine")
                        .WithMany("Remedy")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mediassistwebapi.Entities.Models.Symptom", "Symptom")
                        .WithMany("Remedy")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Medicine", b =>
                {
                    b.Navigation("Remedy");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Remedy", b =>
                {
                    b.Navigation("Dosage");
                });

            modelBuilder.Entity("mediassistwebapi.Entities.Models.Symptom", b =>
                {
                    b.Navigation("Remedy");
                });
#pragma warning restore 612, 618
        }
    }
}
